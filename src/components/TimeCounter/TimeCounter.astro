---
const {
  id = "countdown",
  title = "Contador",
  date = "2025-10-05T14:00:00",
} = Astro.props;
---

<section class="py-20 bg-black text-white">
  <div class="container mx-auto text-center">
    <h2 class="text-5xl heading-pop neon-title text-yellow-300">{title}</h2>
    <div class="neon-divider mt-4"></div>
    <div id={id} class="mt-10 grid grid-cols-2 sm:grid-cols-4 gap-6 place-items-center">
      <div>
        <span id={`${id}-days`} class="chip-neon-cyan chip-ring subtitle-modern text-3xl md:text-4xl  neon-pulse"></span>
        <div class="mt-2 text-xs md:text-sm font-syncopate tracking-widest uppercase text-gray-300">DÃ­as</div>
      </div>
      <div>
        <span id={`${id}-hours`} class="chip-neon-cyan chip-ring subtitle-modern text-3xl md:text-4xl neon-pulse"></span>
        <div class="mt-2 text-xs md:text-sm font-syncopate tracking-widest uppercase text-gray-300">Horas</div>
      </div>
      <div>
        <span id={`${id}-minutes`} class="chip-neon-cyan chip-ring subtitle-modern text-3xl md:text-4xl neon-pulse"></span>
        <div class="mt-2 text-xs md:text-sm font-syncopate tracking-widest uppercase text-gray-300">Minutos</div>
      </div>
      <div>
        <span id={`${id}-seconds`} class="chip-neon-cyan chip-ring subtitle-modern text-3xl md:text-4xl neon-pulse"></span>
        <div class="mt-2 text-xs md:text-sm font-syncopate tracking-widest uppercase text-gray-300">Segundos</div>
      </div>
    </div>
  </div>
</section>

<script define:vars={{ date, id }}>
  const timeZone = 'America/Mexico_City';

  // Parse an ISO-like string 'YYYY-MM-DDTHH:mm:ss' into parts
  function parseIsoLocal(s) {
    const m = String(s).match(/^(\d{4})-(\d{2})-(\d{2})[T\s](\d{2}):(\d{2}):(\d{2})$/);
    if (!m) return null;
    const [_, y, mo, d, h, mi, se] = m;
    return { y: +y, mo: +mo, d: +d, h: +h, mi: +mi, se: +se };
  }

  // Calculate the timezone offset (ms) for a given UTC date in a target timeZone
  function tzOffsetMsAt(utcDate, tz) {
    const fmt = new Intl.DateTimeFormat('en-US', {
      timeZone: tz,
      hour12: false,
      year: 'numeric', month: '2-digit', day: '2-digit',
      hour: '2-digit', minute: '2-digit', second: '2-digit'
    });
    const parts = Object.fromEntries(fmt.formatToParts(utcDate).map(p => [p.type, p.value]));
    const asIfUtc = Date.UTC(+parts.year, +parts.month - 1, +parts.day, +parts.hour, +parts.minute, +parts.second);
    return asIfUtc - utcDate.getTime();
  }

  // Convert a local wall time in the given timeZone to a UTC timestamp (ms)
  function zonedLocalToUtcMs(parts, tz) {
    // Start with the local wall time as if it were UTC
    const provisionalUtcMs = Date.UTC(parts.y, parts.mo - 1, parts.d, parts.h, parts.mi, parts.se);
    // Find the offset at that instant and subtract it to get true UTC
    const offset = tzOffsetMsAt(new Date(provisionalUtcMs), tz);
    return provisionalUtcMs - offset;
  }

  const parsed = parseIsoLocal(date);
  // Fallback to native parse if format doesn't match
  const targetMs = parsed ? zonedLocalToUtcMs(parsed, timeZone) : new Date(date).getTime();

  const pad = (n) => String(n).padStart(2, '0');
  const byId = (s) => document.getElementById(s);

  function update() {
    const nowMs = Date.now();
    let distance = targetMs - nowMs;

    if (distance <= 0) {
      distance = 0;
    }

    const days = Math.floor(distance / (1000 * 60 * 60 * 24));
    const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((distance % (1000 * 60)) / 1000);

    const elDays = byId(`${id}-days`);
    const elHours = byId(`${id}-hours`);
    const elMinutes = byId(`${id}-minutes`);
    const elSeconds = byId(`${id}-seconds`);

    if (elDays) elDays.textContent = String(days);
    if (elHours) elHours.textContent = pad(hours);
    if (elMinutes) elMinutes.textContent = pad(minutes);
    if (elSeconds) elSeconds.textContent = pad(seconds);
  }

  // Initialize immediately so values show without waiting 1s
  update();
  const timer = setInterval(() => {
    update();
    if (Date.now() >= targetMs) clearInterval(timer);
  }, 1000);
</script>

